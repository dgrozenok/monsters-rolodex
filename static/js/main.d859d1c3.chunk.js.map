{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","monsters","map","SearchBox","placeholder","searchChanged","type","onChange","App","props","handleChange","e","setState","searchField","target","value","state","fetch","then","resp","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,4BACtB,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,YCHHC,EAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACtB,qBAAKP,UAAU,YAAf,SAEIO,EAASC,KAAI,SAAAT,GAAO,OAAI,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQI,UCJpCM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,cAAf,OACvB,uBAAOX,UAAU,SAASY,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCkC/DG,E,kDAhCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAcRC,aAAe,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAZvD,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAa,IALE,E,qDASnB,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACX,SAAUoB,S,oBAK5C,WACE,MAAgCC,KAAKN,MAA9Bf,EAAP,EAAOA,SAAUY,EAAjB,EAAiBA,YACXU,EAAmBtB,EAASuB,QAAO,SAAA/B,GAAO,OAC9CA,EAAQK,KAAK2B,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWU,YAAY,kBAAkBC,cAAeiB,KAAKZ,eAC7D,cAAC,EAAD,CAAUT,SAAUsB,W,GA3BVI,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d859d1c3.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = ({monster}) => (\n  <div className=\"card-container\">\n    <img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} />\n    <h2>{monster.name}</h2>\n    <p>{monster.email}</p>\n  </div>\n)","import React from 'react';\nimport './card-list.styles.css';\nimport {Card} from \"../card/card.component\";\n\nexport const CardList = ({monsters}) => (\n  <div className=\"card-list\">\n    {\n      monsters.map(monster => <Card key={monster.id} monster={monster} />)\n    }\n  </div>\n);\n","import React from \"react\";\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, searchChanged}) => (\n  <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={searchChanged} />\n);","import React from 'react';\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n  \n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(resp => resp.json())\n      .then(users => this.setState({monsters: users}));\n  }\n\n  handleChange = e => this.setState({searchField: e.target.value});\n  \n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder=\"search monsters\" searchChanged={this.handleChange} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}